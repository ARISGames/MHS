// Generated by CoffeeScript 1.9.3
(function() {
  var Bison, Chokecherries, Loader, Timpsula, V2, V2Polar, loadAll;

  Loader = (function() {
    function Loader() {
      this.queued = 0;
      this.waiting = [];
    }

    Loader.prototype.queue = function(loadable) {
      this.queued++;
      return loadable.load((function(_this) {
        return function() {
          var callback, j, len, ref;
          _this.queued--;
          if (_this.queued === 0) {
            ref = _this.waiting;
            for (j = 0, len = ref.length; j < len; j++) {
              callback = ref[j];
              callback();
            }
            return _this.waiting = [];
          }
        };
      })(this));
    };

    Loader.prototype.image = function(url) {
      var img;
      img = new Image();
      this.queue($(img));
      img.src = url;
      return img;
    };

    Loader.prototype.afterLoad = function(callback) {
      if (this.queued === 0) {
        return setTimeout(callback, 0);
      } else {
        return this.waiting.push(callback);
      }
    };

    return Loader;

  })();

  loadAll = function(loadables, callback) {
    var j, len, loader, x;
    loader = new Loader;
    for (j = 0, len = loadables.length; j < len; j++) {
      x = loadables[j];
      loader.queue(x);
    }
    return loader.afterLoad(callback);
  };

  Timpsula = (function() {
    function Timpsula(canvas1) {
      var i, loader;
      this.canvas = canvas1;
      this.ctx = this.canvas.getContext('2d');
      this.ticks = 0;
      this.stage = 0;
      loader = new Loader;
      this.imgs = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 4; i = ++j) {
          results.push(loader.image("timpsula-" + i + ".png"));
        }
        return results;
      })();
    }

    Timpsula.prototype.tick = function() {
      this.ticks++;
      if (this.stage <= 4) {
        return this;
      } else {
        return new Bison(this.canvas);
      }
    };

    Timpsula.prototype.draw = function() {
      return this.ctx.drawImage(this.imgs[Math.min(this.stage, 4)], 0, 0, this.canvas.width, this.canvas.height);
    };

    Timpsula.prototype.mousedown = function(e) {
      return this.stage++;
    };

    return Timpsula;

  })();

  Bison = (function() {
    function Bison(canvas1) {
      var i, loader;
      this.canvas = canvas1;
      this.ctx = this.canvas.getContext('2d');
      this.ticks = 0;
      this.stage = 0;
      loader = new Loader;
      this.imgs = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 6; i = ++j) {
          results.push(loader.image("bison-" + i + ".png"));
        }
        return results;
      })();
    }

    Bison.prototype.tick = function() {
      this.ticks++;
      if (this.stage <= 6) {
        return this;
      } else {
        return new Chokecherries(this.canvas);
      }
    };

    Bison.prototype.draw = function() {
      return this.ctx.drawImage(this.imgs[Math.min(this.stage, 6)], 0, 0, this.canvas.width, this.canvas.height);
    };

    Bison.prototype.mousedown = function(e) {
      return this.stage++;
    };

    return Bison;

  })();

  Chokecherries = (function() {
    function Chokecherries(canvas1) {
      var i, loader;
      this.canvas = canvas1;
      this.ctx = this.canvas.getContext('2d');
      this.ticks = 0;
      this.stage = 0;
      loader = new Loader;
      this.imgs = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 4; i = ++j) {
          results.push(loader.image("chokecherries-" + i + ".png"));
        }
        return results;
      })();
    }

    Chokecherries.prototype.tick = function() {
      this.ticks++;
      return this;
    };

    Chokecherries.prototype.draw = function() {
      return this.ctx.drawImage(this.imgs[Math.min(this.stage, 4)], 0, 0, this.canvas.width, this.canvas.height);
    };

    Chokecherries.prototype.mousedown = function(e) {
      return this.stage++;
    };

    return Chokecherries;

  })();

  V2 = (function() {
    function V2(x1, y1) {
      this.x = x1;
      this.y = y1;
    }

    V2.prototype.plus = function(arg) {
      var x, y;
      x = arg.x, y = arg.y;
      return new V2(this.x + x, this.y + y);
    };

    V2.prototype.minus = function(arg) {
      var x, y;
      x = arg.x, y = arg.y;
      return new V2(this.x - x, this.y - y);
    };

    V2.prototype.times = function(arg) {
      var x, y;
      x = arg.x, y = arg.y;
      return new V2(this.x * x, this.y * y);
    };

    V2.prototype.distance = function(arg) {
      var x, y;
      x = arg.x, y = arg.y;
      return Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2));
    };

    V2.prototype.magnitude = function() {
      return this.distance(new V2(0, 0));
    };

    V2.prototype.angle = function() {
      return Math.atan2(this.y, this.x);
    };

    V2.prototype.withMagnitude = function(r) {
      return V2Polar(r, this.angle());
    };

    V2.prototype.withAngle = function(theta) {
      return V2Polar(this.magnitude(), theta);
    };

    return V2;

  })();

  V2Polar = function(r, theta) {
    return new V2(r * Math.cos(theta), r * Math.sin(theta));
  };

  $(document).ready(function() {
    var canvas, evt, fn, gameLoop, j, len, ref, resize;
    canvas = $('#the-canvas')[0];
    window.game = new Timpsula(canvas);
    ref = ['mousedown', 'mousemove', 'mouseup', 'swipe', 'swipeupdown'];
    fn = function(evt) {
      return $('#the-canvas').on(evt, function(e) {
        if (window.game[evt] != null) {
          return window.game[evt](e);
        }
      });
    };
    for (j = 0, len = ref.length; j < len; j++) {
      evt = ref[j];
      fn(evt);
    }
    resize = function() {
      canvas.width = $(window).width();
      return canvas.height = $(window).height();
    };
    resize();
    $(window).resize(function() {
      return resize();
    });
    gameLoop = function() {
      window.game = window.game.tick();
      window.game.draw();
      return requestAnimationFrame(gameLoop);
    };
    return gameLoop();
  });

}).call(this);
