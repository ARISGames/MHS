// Generated by CoffeeScript 1.9.3
(function() {
  var Bison, Chokecherries, Loader, Timpsula, bisonImages, chokecherryImages, chopSound, fwooshSound, i, loader, sizzleSound, slapSound, soundFormats, squishSound, timpsulaImages, tingSound;

  Loader = (function() {
    function Loader() {
      this.queued = 0;
      this.waiting = [];
    }

    Loader.prototype.queue = function(loadable) {
      this.queued++;
      return loadable.load((function(_this) {
        return function() {
          var callback, j, len, ref;
          _this.queued--;
          if (_this.queued === 0) {
            ref = _this.waiting;
            for (j = 0, len = ref.length; j < len; j++) {
              callback = ref[j];
              callback();
            }
            return _this.waiting = [];
          }
        };
      })(this));
    };

    Loader.prototype.image = function(url) {
      var img;
      img = new Image();
      this.queue($(img));
      img.src = url;
      return img;
    };

    Loader.prototype.sound = function(urls) {
      var sound;
      sound = null;
      this.queue({
        load: function(cb) {
          return sound = new Howl({
            urls: urls,
            onload: cb
          });
        }
      });
      return sound;
    };

    Loader.prototype.afterLoad = function(callback) {
      if (this.queued === 0) {
        return setTimeout(callback, 0);
      } else {
        return this.waiting.push(callback);
      }
    };

    return Loader;

  })();

  loader = new Loader;

  timpsulaImages = (function() {
    var j, results;
    results = [];
    for (i = j = 0; j <= 4; i = ++j) {
      results.push(loader.image("timpsula-" + i + ".png"));
    }
    return results;
  })();

  bisonImages = (function() {
    var j, results;
    results = [];
    for (i = j = 0; j <= 6; i = ++j) {
      results.push(loader.image("bison-" + i + ".png"));
    }
    return results;
  })();

  chokecherryImages = (function() {
    var j, results;
    results = [];
    for (i = j = 0; j <= 4; i = ++j) {
      results.push(loader.image("chokecherries-" + i + ".png"));
    }
    return results;
  })();

  soundFormats = function(name) {
    return loader.sound([name + ".ogg", name + ".mp3"]);
  };

  chopSound = soundFormats('chop');

  fwooshSound = soundFormats('fwoosh');

  tingSound = soundFormats('ting');

  slapSound = soundFormats('slap');

  sizzleSound = soundFormats('sizzle');

  squishSound = soundFormats('squish');

  Timpsula = (function() {
    function Timpsula(canvas1) {
      this.canvas = canvas1;
      this.ctx = this.canvas.getContext('2d');
      this.ticks = 0;
      this.stage = 0;
    }

    Timpsula.prototype.tick = function() {
      this.ticks++;
      if (this.stage <= 4) {
        return this;
      } else {
        return new Bison(this.canvas);
      }
    };

    Timpsula.prototype.draw = function() {
      return this.ctx.drawImage(timpsulaImages[Math.min(this.stage, 4)], 0, 0, this.canvas.width, this.canvas.height);
    };

    Timpsula.prototype.mousedown = function(e) {
      var ref;
      if ((ref = this.stage) === 0 || ref === 4) {
        return this.stage++;
      }
    };

    Timpsula.prototype.swipeupdown = function(e) {
      var ref;
      if ((ref = this.stage) === 1 || ref === 2 || ref === 3) {
        this.stage++;
        return chopSound.play();
      }
    };

    return Timpsula;

  })();

  Bison = (function() {
    function Bison(canvas1) {
      this.canvas = canvas1;
      this.ctx = this.canvas.getContext('2d');
      this.ticks = 0;
      this.stage = 0;
    }

    Bison.prototype.tick = function() {
      this.ticks++;
      if (this.stage <= 6) {
        return this;
      } else {
        sizzleSound.stop();
        return new Chokecherries(this.canvas);
      }
    };

    Bison.prototype.draw = function() {
      return this.ctx.drawImage(bisonImages[Math.min(this.stage, 6)], 0, 0, this.canvas.width, this.canvas.height);
    };

    Bison.prototype.mousedown = function(e) {
      var ref;
      if (this.stage === 0) {
        fwooshSound.play();
      }
      if (this.stage === 1) {
        tingSound.play();
      }
      if (this.stage === 2) {
        slapSound.play();
      }
      if (this.stage === 3) {
        sizzleSound.play();
      }
      if ((ref = this.stage) === 0 || ref === 1 || ref === 2 || ref === 3 || ref === 6) {
        return this.stage++;
      }
    };

    Bison.prototype.swipe = function(e) {
      var ref;
      if ((ref = this.stage) === 4 || ref === 5) {
        this.stage++;
        return slapSound.play();
      }
    };

    Bison.prototype.swipeupdown = function(e) {
      var ref;
      if ((ref = this.stage) === 4 || ref === 5) {
        this.stage++;
        return slapSound.play();
      }
    };

    return Bison;

  })();

  Chokecherries = (function() {
    function Chokecherries(canvas1) {
      this.canvas = canvas1;
      this.ctx = this.canvas.getContext('2d');
      this.ticks = 0;
      this.stage = 0;
      loader = new Loader;
    }

    Chokecherries.prototype.tick = function() {
      this.ticks++;
      return this;
    };

    Chokecherries.prototype.draw = function() {
      return this.ctx.drawImage(chokecherryImages[Math.min(this.stage, 4)], 0, 0, this.canvas.width, this.canvas.height);
    };

    Chokecherries.prototype.mousedown = function(e) {
      var ref;
      if ((ref = this.stage) === 0) {
        return this.stage++;
      }
    };

    Chokecherries.prototype.swipe = function(e) {
      var ref;
      if ((ref = this.stage) === 1 || ref === 2 || ref === 3) {
        this.stage++;
        return squishSound.play();
      }
    };

    Chokecherries.prototype.swipeupdown = function(e) {
      var ref;
      if ((ref = this.stage) === 1 || ref === 2 || ref === 3) {
        this.stage++;
        return squishSound.play();
      }
    };

    return Chokecherries;

  })();

  $(document).ready(function() {
    var canvas, evt, fn, j, len, ref, resize;
    canvas = $('#the-canvas')[0];
    window.game = new Timpsula(canvas);
    ref = ['mousedown', 'mousemove', 'mouseup', 'swipe', 'swipeupdown'];
    fn = function(evt) {
      return $('#the-canvas').on(evt, function(e) {
        if (window.game[evt] != null) {
          return window.game[evt](e);
        }
      });
    };
    for (j = 0, len = ref.length; j < len; j++) {
      evt = ref[j];
      fn(evt);
    }
    resize = function() {
      canvas.width = $(window).width();
      return canvas.height = $(window).height();
    };
    resize();
    $(window).resize(function() {
      return resize();
    });
    return loader.afterLoad(function() {
      var gameLoop;
      gameLoop = function() {
        window.game = window.game.tick();
        window.game.draw();
        return requestAnimationFrame(gameLoop);
      };
      return gameLoop();
    });
  });

}).call(this);
