// Generated by CoffeeScript 1.9.3
(function() {
  var Bison, Chokecherries, Timpsula;

  Timpsula = (function() {
    function Timpsula() {
      this.ticks = 0;
      this.stage = 0;
    }

    Timpsula.prototype.tick = function(pg) {
      this.ticks++;
      if (this.stage <= 4) {
        return this;
      } else {
        return new Bison;
      }
    };

    Timpsula.prototype.draw = function(pg) {
      return pg.layer.drawImage(pg.images["timpsula-" + (Math.min(this.stage, 4))], 0, 0, pg.layer.width, pg.layer.height);
    };

    Timpsula.prototype.pointerdown = function(e, pg) {
      var ref, ref1;
      if ((ref = this.stage) === 1 || ref === 2 || ref === 3) {
        this.stage++;
        return pg.sound.play('chop');
      } else if ((ref1 = this.stage) === 0 || ref1 === 4) {
        return this.stage++;
      }
    };

    return Timpsula;

  })();

  Bison = (function() {
    function Bison() {
      this.ticks = 0;
      this.stage = 0;
    }

    Bison.prototype.tick = function(pg) {
      this.ticks++;
      if (this.stage <= 6) {
        return this;
      } else {
        return new Chokecherries;
      }
    };

    Bison.prototype.draw = function(pg) {
      return pg.layer.drawImage(pg.images["bison-" + (Math.min(this.stage, 6))], 0, 0, pg.layer.width, pg.layer.height);
    };

    Bison.prototype.pointerdown = function(e, pg) {
      var ref, ref1;
      if ((ref = this.stage) === 0 || ref === 1 || ref === 2 || ref === 3 || ref === 6) {
        if (this.stage === 0) {
          pg.sound.play('fwoosh');
        }
        if (this.stage === 1) {
          pg.sound.play('ting');
        }
        if (this.stage === 2) {
          pg.sound.play('slap');
        }
        if (this.stage === 3) {
          pg.sound.play('sizzle');
        }
        return this.stage++;
      } else if ((ref1 = this.stage) === 4 || ref1 === 5) {
        pg.sound.play('slap');
        return this.stage++;
      }
    };

    return Bison;

  })();

  Chokecherries = (function() {
    function Chokecherries() {
      this.ticks = 0;
      this.stage = 0;
    }

    Chokecherries.prototype.tick = function(pg) {
      this.ticks++;
      return this;
    };

    Chokecherries.prototype.draw = function(pg) {
      return pg.layer.drawImage(pg.images["chokecherries-" + (Math.min(this.stage, 4))], 0, 0, pg.layer.width, pg.layer.height);
    };

    Chokecherries.prototype.pointerdown = function(e, pg) {
      var ref, ref1;
      if ((ref = this.stage) === 0) {
        return this.stage++;
      } else if ((ref1 = this.stage) === 1 || ref1 === 2 || ref1 === 3) {
        pg.sound.play('squish');
        return this.stage++;
      }
    };

    return Chokecherries;

  })();

  $(document).ready(function() {
    window.game = new Timpsula;
    return window.app = playground({
      create: function() {
        var i, j, k, l;
        for (i = j = 0; j <= 4; i = ++j) {
          this.loadImage("timpsula-" + i + ".png");
        }
        for (i = k = 0; k <= 6; i = ++k) {
          this.loadImage("bison-" + i + ".png");
        }
        for (i = l = 0; l <= 4; i = ++l) {
          this.loadImage("chokecherries-" + i + ".png");
        }
        return this.loadSounds('chop', 'fwoosh', 'ting', 'slap', 'sizzle', 'squish');
      },
      step: function() {
        return window.game = window.game.tick(this);
      },
      render: function() {
        return window.game.draw(this);
      },
      pointerdown: function(e) {
        if (window.game['pointerdown'] != null) {
          return window.game.pointerdown(e, this);
        }
      },
      pointermove: function(e) {
        if (window.game['pointermove'] != null) {
          return window.game.pointermove(e, this);
        }
      },
      pointerup: function(e) {
        if (window.game['pointerup'] != null) {
          return window.game.pointerup(e, this);
        }
      }
    });
  });

}).call(this);
